import Head from "next/head";
import { Inter } from "next/font/google";
import { useState, useLayoutEffect, useEffect, useRef } from "react";

import TextInput from "@/components/TextInput";
import SubmitButton from "@/components/SubmitButton";
import ResponseDisplay from "@/components/ResponseDisplay";
import useApi from "@/hooks/useApi";
import { getUserPrompt } from "@/prompts/promptUtils";
import Image from "next/image";
import fxLogo from "../public/assets/fx-recipe-logo.png";
import ChevronLeft from "../public/assets/chevron-left.svg"

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const [inputValue, setInputValue] = useState("");
  // const { data, error, loading, fetchData } = useApi();
  const [loading, setLoading] = useState(false);
  const error = false;
  const [isExpanded, setIsExpanded] = useState(false);
  const [isDesktopTitleVisible, setIsDesktopTitleVisible] = useState(false);
  const targetRef = useRef(null);

  useLayoutEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        setIsDesktopTitleVisible(!entry.isIntersecting);
      },
      { threshold: 0 }
    );

    const target = targetRef.current;
    if (target) {
      observer.observe(target);
    }

    return () => {
      if (target) {
        observer.unobserve(target);
      }
    };
  }, [isExpanded]);

  const handleExpand = () => {
    setIsExpanded(true);
  };

  const handleCollapse = () => {
    setIsExpanded(false);
  };

  const data = {
    result: {
      title: "Kodachrome 64",
      description: "A whimsical and vibrant film recipe inspired by Wes Anderson's unique visual style, perfect for capturing colorful and symmetrical compositions.",
      effectAndAesthetic: "This recipe enhances pastel colors and provides a soft, dreamy look, reminiscent of Wes Anderson's films.",
      exampleUse: "Ideal for shooting scenes in quirky cafes, vintage shops, or during playful outdoor adventures.",
      iso: "200-800",
      dynamicRange: "dr200",
      colorProfile: "Classic Chrome",
      highlight: 1,
      shadow: 2,
      color: 3,
      noiseReduction: -2,
      sharpening: 1,
      clarity: 2,
      grain: "weak-small",
      colorChromeFx: "strong",
      colorChromeBlueFx: "weak",
      whiteBalance: "daylight",
      whiteBalanceShiftBlue: 1,
      whiteBalanceShiftRed: 0,
      exposureCompensation: [
        "0",
        "+1/3"
      ],
      optionalAdjustments: "Consider using a vignette effect to draw attention to the center of the frame."
    }
  }

  const handleSubmit = async (event) => {
    event.preventDefault();
    setLoading(true);

    setTimeout(() => {
      setLoading(false);
    }, 2000)
    // const submitValue = getUserPrompt(inputValue);
    // await fetchData("/api/openai", "POST", submitValue);
  };

  const handleInputChange = (event) => {
    setInputValue(event.target.value);
  };

  return (
    <>
      <Head>
        <title>NextJS OpenAI Fujifilm Recipe</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="main-container">
        <div className="container">
          <div className={`sidebar ${isExpanded ? 'slide-out' : 'slide-in'}`}>
            <Image src={fxLogo} width={56} height={56} alt="icon" />
            <h1>Find Recipe</h1>
            {!isExpanded && (
              <button className="search-btn" onClick={handleExpand}>
                Search
              </button>
            )}
          </div>
          <div className={`main-content ${isExpanded ? 'expand-slide' : 'collapse-slide'}`}>
            {/*<form onSubmit={handleSubmit}>*/}
            {/*  <div className="prompt-view">*/}
            {/*    <TextInput*/}
            {/*      value={inputValue}*/}
            {/*      onChange={handleInputChange}*/}
            {/*      placeholder={"Enter a prompt"}*/}
            {/*    />*/}
            {/*    <SubmitButton disabled={loading}/>*/}
            {/*  </div>*/}
            {/*</form>*/}
            {(data && isExpanded) && <ResponseDisplay
              data={data}
              error={error}
              loading={loading}
            >
              <>
                <p className="pre-text" ref={targetRef}>
                  Custom Recipe
                </p>
                <h1 className="title">
                  {data.result.title}
                </h1>
              </>
            </ResponseDisplay>}
          </div>
          <div className={`nav-header ${isExpanded ? 'slide-in' : 'slide-out'} ${isDesktopTitleVisible ? 'intersecting' : ''}`}>
            <button
              className="back-btn"
              onClick={handleCollapse}
            >
              <Image src={ChevronLeft} alt="back button" height={32} width={32} />
            </button>
            {(isExpanded && data) && <p className={`mobile-title ${isDesktopTitleVisible ? 'intersecting' : ''}`}>{data.result.title}</p>}
          </div>
        </div>
      </main>
    </>
  );
}
